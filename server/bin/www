#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var os = require('os'); // 引入 os 模块
const { WebSocketServer } = require("ws")

const wss = new WebSocketServer({ port: 3001 });

wss.on('connection', ()=>{
  console.log('连接成功')
})

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const hostname = '0.0.0.0';

server.listen(port, hostname, () => {
  console.log('后台服务启动成功', `http://${getWLANIPv4Address()}:${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * 获取无线局域网适配器 (WLAN) 的 IPv4 地址
 */

function getWLANIPv4Address() {
  const interfaces = os.networkInterfaces();
  for (const devName in interfaces) {
    // 查找包含 "WLAN" 或 "Wi-Fi" 的网络接口名称
    if (devName.toLowerCase().includes("wlan") || devName.toLowerCase().includes("wi-fi")) {
      const iface = interfaces[devName].find((details) => {
        // 只返回非内部（非 loopback）的 IPv4 地址
        return details.family === 'IPv4' && !details.internal;
      });
      if (iface) {
        // 返回找到的第一个符合条件的IP地址
        return iface.address;
      }
    }
  }
  return '127.0.0.1'; // 如果没有找到合适的IP，则默认返回localhost
}