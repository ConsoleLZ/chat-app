// 生成图形验证码
export const drawCaptcha = (dom : string) : Promise<string> => {
	const w = 200
	const h = 70
	const fontSize = 45
	let captcha = '';
	function getRandomColor() {
		return `rgb(${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)})`;
	}

	return new Promise((resolve, reject) => {
		uni.createCanvasContextAsync({
			id: dom,
			success: (context : CanvasContext) => {
				console.log('验证码绘制成功')
				const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
				const ctx = context.getContext('2d')!;
				ctx.fillStyle = getRandomColor()
				ctx.fillRect(0, 0, w, h)

				// 绘制验证码字符
				for (let i = 0; i < 6; i++) { // 生成6位验证码
					const char = chars.charAt(Math.floor(Math.random() * chars.length));
					captcha += char;

					// 设置字体大小和样式
					ctx.font = `${fontSize}px sans-serif`

					// 设置文本颜色
					ctx.fillStyle = getRandomColor()

					// 绘制文本
					ctx.fillText(char, i * 25 + 20, h / 2 + 20);
				}

				resolve(captcha)
			},
			fail() {
				reject(false)
			}
		})
	})
}

// get请求时的参数拼接
export const buildQueryString = (params : UTSJSONObject) : string => {
	// 首先检查输入是否为对象且不是null
	if (typeof params !== 'object' || params === null) {
		throw new Error('Parameter must be an object');
	}

	// 创建一个数组来存储键值对
	const queryStringParts = [];

	// 定义编码函数以确保安全的URL参数
	function encode(value : string) {
		return encodeURIComponent(value);
	}

	// 遍历对象的键值对并添加到数组中
	for (const key in params) {
		if (params.hasOwnProperty(key)) {
			let value = params[key]!;

			// 如果值是数组或对象，需要序列化它们
			if (Array.isArray(value) || typeof value === 'object') {
				value = JSON.stringify(value);
			}

			// 对键和值进行编码，并添加到数组中
			queryStringParts.push(encode(key) + '=' + encode(value));
		}
	}

	// 将数组连接成字符串并返回，去掉可能存在的前导'?'
	return '?' + queryStringParts.join('&');
}