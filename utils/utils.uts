import { MethodsType } from './types.uts'
import { SERVER_URL } from '@/config.uts'

// 生成图形验证码
export const drawCaptcha = (dom : string) => {
	const w = 200
	const h = 70
	const fontSize = 45
	function getRandomColor() {
		return `rgb(${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)})`;
	}
	uni.createCanvasContextAsync({
		id: dom,
		success: (context : CanvasContext) => {
			const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
			let captcha = '';
			// 随机颜色
			const getRandomColor = () => {
				return `rgb(${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)},${Math.floor(Math.random() * 256)})`;
			}
			const ctx = context.getContext('2d')!;
			ctx.fillStyle = getRandomColor()
			ctx.fillRect(0, 0, w, h)

			// 绘制验证码字符
			for (let i = 0; i < 6; i++) { // 生成6位验证码
				const char = chars.charAt(Math.floor(Math.random() * chars.length));
				captcha += char;

				// 设置字体大小和样式
				ctx.font = `${fontSize}px sans-serif`

				// 设置文本颜色
				ctx.fillStyle = getRandomColor()

				// 绘制文本
				ctx.fillText(char, i * 25 + 20, h / 2 + 20);
			}
		}
	})
}

// 网络请求
export class networkRequest<T> {
	private url : string;
	private method : MethodsType;

	constructor(url : string, method : MethodsType) {
		this.url = SERVER_URL + url;
		this.method = method;
	}

	request(data : any) : Promise<RequestSuccess<T>> {
		return new Promise((resolve, reject) => {
			uni.request({
				url: this.url,
				data,
				method: this.method,
				success(res) {
					resolve(res as RequestSuccess<T>); // 这里直接使用泛型 T
				},
				fail(err) {
					reject(err);
				},
			}); // 这里使用类型断言，确保类型正确
		});
	}
}